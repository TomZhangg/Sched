; ModuleID = 'Schedch'

%struct.Array = type { i32, %struct.Array_element*, %struct.Array_element*, i32 }
%struct.Array_element = type { %struct.Array_element*, %struct.Array_element*, i8* }
%struct.time = type { i32, i32, i32, i32, i32, i32 }

@fmt = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt.2 = private unnamed_addr constant [4 x i8] c"%g\0A\00"
@0 = private unnamed_addr constant [7 x i8] c"\22asdf\22\00"
@1 = private unnamed_addr constant [7 x i8] c"\22asdf\22\00"
@2 = private unnamed_addr constant [7 x i8] c"\22asdf\22\00"

declare i32 @printf(i8*, ...)

declare %struct.Array* @arr_init()

declare %struct.Array* @arr_set_contains_struct(%struct.Array*)

declare %struct.Array_element* @arr_append(%struct.Array*, i8*)

declare %struct.Array_element* @arr_get(%struct.Array*, i32)

declare %struct.Array_element* @arr_set(%struct.Array*, i8*, i32)

declare i32 @arr_length(%struct.Array*)

declare i32 @arr_contains(%struct.Array*, i8*)

declare %struct.time* @time_init(i32, i32, i32, i32, i32, i32)

define i32 @main() {
entry:
  %a = alloca i32
  %b = alloca i32
  %c = alloca i32
  store i32 123, i32* %a
  store i32 234, i32* %b
  store i32 345, i32* %c
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i32 0, i32 0))
  %d = alloca i32
  %asdf_result = call i32 @asdf(i32 1, i32 2, i1 true)
  store i32 %asdf_result, i32* %c
  %fdsa_result = call i32 @fdsa(i32 234, i32 321, i1 false)
  store i32 %fdsa_result, i32* %d
  %0 = bitcast i32* %a to i8*
  tail call void @free(i8* %0)
  %1 = bitcast i32 (i32, i32, i1)* @asdf to i8*
  tail call void @free(i8* %1)
  %2 = bitcast i32* %b to i8*
  tail call void @free(i8* %2)
  %3 = bitcast i32* %c to i8*
  tail call void @free(i8* %3)
  %4 = bitcast i32* %d to i8*
  tail call void @free(i8* %4)
  %5 = bitcast i32 (i32, i32, i1)* @fdsa to i8*
  tail call void @free(i8* %5)
  ret i32 0
}

define i32 @asdf(i32, i32, i1) {
entry:
  %a = alloca i32
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i32 0, i32 0))
  %asdf_result = call i32 @asdf(i32 1, i32 2, i1 false)
  ret i32 123
}

define i32 @fdsa(i32, i32, i1) {
entry:
  %a = alloca i32
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i32 0, i32 0))
  %asdf_result = call i32 @asdf(i32 1, i32 2, i1 false)
  ret i32 321
}

declare void @free(i8*)
