; ModuleID = 'Schedch'

%struct.Array = type { i32, %struct.Array_element*, %struct.Array_element*, i32 }
%struct.Array_element = type { %struct.Array_element*, %struct.Array_element*, i8* }
%struct.time = type { i32, i32, i32, i32, i32, i32 }

@fmt = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt.2 = private unnamed_addr constant [4 x i8] c"%g\0A\00"
@0 = private unnamed_addr constant [16 x i8] c"times are equal\00"
@1 = private unnamed_addr constant [21 x i8] c"times are a changing\00"
@2 = private unnamed_addr constant [16 x i8] c"times are equal\00"
@3 = private unnamed_addr constant [21 x i8] c"times are a changing\00"
@4 = private unnamed_addr constant [16 x i8] c"times are equal\00"
@5 = private unnamed_addr constant [21 x i8] c"times are a changing\00"
@6 = private unnamed_addr constant [17 x i8] c"a is more recent\00"
@7 = private unnamed_addr constant [17 x i8] c"d is more recent\00"
@8 = private unnamed_addr constant [16 x i8] c"times are equal\00"
@9 = private unnamed_addr constant [21 x i8] c"times are a changing\00"
@10 = private unnamed_addr constant [33 x i8] c"time1 is atleast recent as time2\00"
@11 = private unnamed_addr constant [21 x i8] c"time2 is more recent\00"

declare i32 @printf(i8*, ...)

declare %struct.Array* @arr_init()

declare %struct.Array* @arr_set_contains_struct(%struct.Array*)

declare %struct.Array_element* @arr_append(%struct.Array*, i8*)

declare %struct.Array_element* @arr_get(%struct.Array*, i32)

declare %struct.Array_element* @arr_set(%struct.Array*, i8*, i32)

declare i32 @arr_length(%struct.Array*)

declare i32 @arr_contains(%struct.Array*, i8*)

declare %struct.time* @time_init(i32, i32, i32, i32, i32, i32)

declare void @print_time(%struct.time*)

declare i1 @time_compare(%struct.time*, %struct.time*)

declare i1 @time_equal(%struct.time*, %struct.time*)

define i32 @main() {
entry:
  %a = alloca %struct.time*
  %time_init = call %struct.time* @time_init(i32 2000, i32 9, i32 10, i32 0, i32 0, i32 0)
  store %struct.time* %time_init, %struct.time** %a
  %b = alloca %struct.time*
  %time_init1 = call %struct.time* @time_init(i32 2000, i32 9, i32 10, i32 10, i32 10, i32 10)
  store %struct.time* %time_init1, %struct.time** %b
  %d = alloca i1
  %k = alloca %struct.time*
  %time_init2 = call %struct.time* @time_init(i32 2000, i32 9, i32 10, i32 10, i32 10, i32 10)
  store %struct.time* %time_init2, %struct.time** %k
  %j = alloca %struct.time*
  %time_init3 = call %struct.time* @time_init(i32 2000, i32 9, i32 10, i32 0, i32 0, i32 0)
  store %struct.time* %time_init3, %struct.time** %j
  %k4 = load %struct.time*, %struct.time** %k
  %b5 = load %struct.time*, %struct.time** %b
  %time_equal = call i1 @time_equal(%struct.time* %b5, %struct.time* %k4)
  br i1 %time_equal, label %then, label %else

merge:                                            ; preds = %else, %then
  %j7 = load %struct.time*, %struct.time** %j
  %a8 = load %struct.time*, %struct.time** %a
  %time_equal9 = call i1 @time_equal(%struct.time* %a8, %struct.time* %j7)
  br i1 %time_equal9, label %then11, label %else13

then:                                             ; preds = %entry
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i32 0, i32 0))
  br label %merge

else:                                             ; preds = %entry
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @1, i32 0, i32 0))
  br label %merge

merge10:                                          ; preds = %else13, %then11
  %c = alloca %struct.time*
  %d15 = alloca %struct.time*
  %time_init16 = call %struct.time* @time_init(i32 2000, i32 9, i32 1, i32 0, i32 0, i32 0)
  store %struct.time* %time_init16, %struct.time** %d15
  %d17 = load %struct.time*, %struct.time** %d15
  %a18 = load %struct.time*, %struct.time** %a
  %time_equal19 = call i1 @time_equal(%struct.time* %a18, %struct.time* %d17)
  br i1 %time_equal19, label %then21, label %else23

then11:                                           ; preds = %merge
  %printf12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @2, i32 0, i32 0))
  br label %merge10

else13:                                           ; preds = %merge
  %printf14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @3, i32 0, i32 0))
  br label %merge10

merge20:                                          ; preds = %else23, %then21
  %d25 = load %struct.time*, %struct.time** %d15
  %a26 = load %struct.time*, %struct.time** %a
  %time_compare = call i1 @time_compare(%struct.time* %a26, %struct.time* %d25)
  br i1 %time_compare, label %then28, label %else30

then21:                                           ; preds = %merge10
  %printf22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @4, i32 0, i32 0))
  br label %merge20

else23:                                           ; preds = %merge10
  %printf24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @5, i32 0, i32 0))
  br label %merge20

merge27:                                          ; preds = %else30, %then28
  %e = alloca %struct.time*
  %time_init32 = call %struct.time* @time_init(i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  store %struct.time* %time_init32, %struct.time** %e
  %d33 = alloca i1
  %f = alloca %struct.time*
  %b34 = load %struct.time*, %struct.time** %b
  %a35 = load %struct.time*, %struct.time** %a
  %time_equal36 = call i1 @time_equal(%struct.time* %a35, %struct.time* %b34)
  br i1 %time_equal36, label %then38, label %else40

then28:                                           ; preds = %merge20
  %printf29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @6, i32 0, i32 0))
  br label %merge27

else30:                                           ; preds = %merge20
  %printf31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @7, i32 0, i32 0))
  br label %merge27

merge37:                                          ; preds = %else40, %then38
  %b42 = load %struct.time*, %struct.time** %b
  %a43 = load %struct.time*, %struct.time** %a
  %time_compare44 = call i1 @time_compare(%struct.time* %a43, %struct.time* %b42)
  br i1 %time_compare44, label %then46, label %else48

then38:                                           ; preds = %merge27
  %printf39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @8, i32 0, i32 0))
  br label %merge37

else40:                                           ; preds = %merge27
  %printf41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @9, i32 0, i32 0))
  br label %merge37

merge45:                                          ; preds = %else48, %then46
  %b50 = load %struct.time*, %struct.time** %b
  %a51 = load %struct.time*, %struct.time** %a
  %time_equal52 = call i1 @time_equal(%struct.time* %a51, %struct.time* %b50)
  %printf53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i1 %time_equal52)
  ret i32 0

then46:                                           ; preds = %merge37
  %printf47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @10, i32 0, i32 0))
  br label %merge45

else48:                                           ; preds = %merge37
  %printf49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @11, i32 0, i32 0))
  br label %merge45
}
