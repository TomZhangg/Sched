; ModuleID = 'Schedch'

%struct.Array = type { i32, %struct.Array_element*, %struct.Array_element*, i32 }
%struct.Array_element = type { %struct.Array_element*, %struct.Array_element*, i8* }
%struct.time = type { i32, i32, i32, i32, i32, i32 }

@fmt = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt.2 = private unnamed_addr constant [4 x i8] c"%g\0A\00"

declare i32 @printf(i8*, ...)

declare %struct.Array* @arr_init()

declare %struct.Array* @arr_set_contains_struct(%struct.Array*)

declare %struct.Array_element* @arr_append(%struct.Array*, i8*)

declare %struct.Array_element* @arr_get(%struct.Array*, i32)

declare %struct.Array_element* @arr_set(%struct.Array*, i8*, i32)

declare i32 @arr_length(%struct.Array*)

declare i32 @arr_contains(%struct.Array*, i8*)

declare %struct.time* @time_init(i32, i32, i32, i32, i32, i32)

declare void @print_time(%struct.time*)

declare i1 @time_compare(%struct.time*, %struct.time*)

declare i1 @time_equal(%struct.time*, %struct.time*)

define i32 @main() {
entry:
  %a = alloca %struct.time*
  %time_init = call %struct.time* @time_init(i32 2000, i32 9, i32 10, i32 0, i32 0, i32 0)
  store %struct.time* %time_init, %struct.time** %a
  %b = alloca %struct.time*
  %time_init1 = call %struct.time* @time_init(i32 2000, i32 9, i32 10, i32 10, i32 10, i32 10)
  store %struct.time* %time_init1, %struct.time** %b
  %d = alloca i1
  %c = alloca %struct.time*
  %d2 = alloca %struct.time*
  %time_init3 = call %struct.time* @time_init(i32 2000, i32 9, i32 1, i32 0, i32 0, i32 0)
  store %struct.time* %time_init3, %struct.time** %d2
  %e = alloca %struct.time*
  %time_init4 = call %struct.time* @time_init(i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  store %struct.time* %time_init4, %struct.time** %e
  %d5 = alloca i1
  %f = alloca %struct.time*
  ret i32 0
}
