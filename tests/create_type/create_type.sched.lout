; ModuleID = 'Schedch'

%struct.Array = type { i32, %struct.Array_element*, %struct.Array_element*, i32 }
%struct.Array_element = type { %struct.Array_element*, %struct.Array_element*, i8* }
%struct.time = type { i32, i32, i32, i32, i32, i32 }
%item = type { i8*, %struct.time*, %item_attr*, %item* }
%item_attr = type { i8*, i8*, %item_attr* }

@fmt = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt.2 = private unnamed_addr constant [4 x i8] c"%g\0A\00"
@0 = private unnamed_addr constant [12 x i8] c"trump_nov_7\00"
@1 = private unnamed_addr constant [9 x i8] c"location\00"
@2 = private unnamed_addr constant [12 x i8] c"Oval Office\00"

declare i32 @printf(i8*, ...)

declare %struct.Array* @arr_init()

declare %struct.Array* @arr_set_contains_struct(%struct.Array*)

declare %struct.Array_element* @arr_append(%struct.Array*, i8*)

declare %struct.Array_element* @arr_get(%struct.Array*, i32)

declare %struct.Array_element* @arr_set(%struct.Array*, i8*, i32)

declare i32 @arr_length(%struct.Array*)

declare i32 @arr_contains(%struct.Array*, i8*)

declare %struct.time* @time_init(i32, i32, i32, i32, i32, i32)

declare void @print_time(%struct.time*)

declare i1 @time_compare(%struct.time*, %struct.time*)

declare i1 @time_equal(%struct.time*, %struct.time*)

define i32 @main() {
entry:
  %0 = alloca { i8*, %struct.time*, i8, %item* }
  %1 = getelementptr inbounds { i8*, %struct.time*, i8, %item* }, { i8*, %struct.time*, i8, %item* }* %0, i32 0, i32 0
  %time_init = call %struct.time* @time_init(i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  %2 = getelementptr inbounds { i8*, %struct.time*, i8, %item* }, { i8*, %struct.time*, i8, %item* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i8*, %struct.time*, i8, %item* }, { i8*, %struct.time*, i8, %item* }* %0, i32 0, i32 2
  %4 = alloca %item
  %time_init1 = call %struct.time* @time_init(i32 2018, i32 11, i32 7, i32 8, i32 0, i32 0)
  %5 = getelementptr inbounds %item, %item* %4, i32 0, i32 1
  %6 = alloca %item_attr
  %7 = getelementptr inbounds %item_attr, %item_attr* %6, i32 0, i32 0
  %8 = getelementptr inbounds %item_attr, %item_attr* %6, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i32 0, i32 0), i8** %7
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0), i8** %8
  %9 = getelementptr inbounds %item_attr, %item_attr* %6, i32 0, i32 2
  store %item_attr* null, %item_attr** %9
  %10 = getelementptr inbounds %item, %item* %4, i32 0, i32 2
  store %struct.time* %time_init1, %struct.time** %5
  store %item_attr* %6, %item_attr** %10
  %11 = getelementptr inbounds %item, %item* %4, i32 0, i32 3
  store %item* null, %item** %11
  %12 = getelementptr inbounds { i8*, %struct.time*, i8, %item* }, { i8*, %struct.time*, i8, %item* }* %0, i32 0, i32 3
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0), i8** %1
  store %struct.time* %time_init, %struct.time** %2
  store i8 1, i8* %3
  store %item* %4, %item** %12
  ret i32 0
}
